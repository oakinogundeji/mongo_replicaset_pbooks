---
    - name: provision an EC2 instance in the ca-central-1a region to join a mongodb replica set
      hosts: localhost
      connection: local
      become: yes
      become_method: sudo
      debugger: on_failed
      gather_facts: yes
      tasks:

          - name: query for LVM physical volume
            shell: pvdisplay
            register: pvdisplay_res

          - debug: var=pvdisplay_res

          - name: create LVM volume group
            when: pvdisplay_res.stdout == ""
            shell: pvcreate /dev/nvme1n1
            register: pvcreate_res

          - debug: var=pvcreate_res

          - name: create LVM volume group
            when: pvcreate_res is success
            shell: vgcreate mongo_data /dev/nvme1n1
            register: vgcreate_res

          - debug: var=vgcreate_res

          - name: create LVM "data" LVM logical volume
            when: vgcreate_res is success
            shell: lvcreate -l 90%vg -n data mongo_data
            register: data_logvol_res

          - debug: var=data_logvol_res

          - name: create LVM "log" and "journal" logical volumes
            when: data_logvol_res is success
            shell: lvcreate -l 5%vg -n {{ item }} mongo_data
            with_items:
                - log
                - journal
            register: log_journal_res

          - debug: var=log_journal_res

          - name: format LVM logical volumes as XFS
            when: log_journal_res is success
            shell: mkfs.xfs /dev/mongo_data/{{ item }}
            with_items:
                - data
                - log
                - journal
            register: xfs_res

          - debug: var=xfs_res

          - name: create mount points for LVM logical volumes
            when: xfs_res is success
            file:
              path: "{{ item }}"
              state: directory
              mode: 0775
            with_items:
                - /data
                - /log
                - /journal
            register: mount_points_res

          - debug: var=mount_points_res

          - name: mount all drives
            when: mount_points_res is success
            mount:
                name: "{{item.label}}"
                src: "{{item.src}}"
                fstype: xfs
                state: mounted
            with_items:
                - { label: '/data', src: '/dev/mongo_data/data'}
                - { label: '/log', src: '/dev/mongo_data/log'}
                - { label: '/journal', src: '/dev/mongo_data/journal'}
            register: drives_mounted_res

          - debug: var=drives_mounted_res

          - name: create "/data/db" directory
            when: drives_mounted_res is success
            file:
              path: /data/db
              state: directory
              mode: 0766
            register: data_db_res

          - debug: var=data_db_res

          - name: create symlink between "/journal" and "/data/journal"
            when: data_db_res is success
            file:
              src: /journal
              dest: /data/journal
              state: link
            register: journal_link_res

          - debug: var=journal_link_res

          - name: move ../mongodb-org-4.0.repo to /etc/yum.repos.d/mongodb-org-4.0.repo file
            shell: mv ../mongodb-org-4.0.repo /etc/yum.repos.d/mongodb-org-4.0.repo
            register: repo_file_moved

          - debug: var=repo_file_moved

          - name: install mongodb
            yum:
              name: mongodb-org
              state: latest
              update_cache: yes
            register: mongodb_installed_res

          - debug: var=mongodb_installed_res

          - name: stop mongod daemon
            when: mongodb_installed_res is success
            service:
              name: mongod
              state: stopped
            register: mongod_stopped

          - debug: var=mongod_stopped

          - name: chown of /data, /journal and /log dirs
            when: mongodb_installed_res is success
            shell: chown -R mongod:mongod {{ item }}
            with_items:
                - /data
                - /log
                - /journal
            register: chown_mongodb_res

          - debug: var=chown_mongodb_res

          - name: get public IP address
            shell: dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}'
            register: pub_ip

          - debug: var=pub_ip

          - name: edit limits.conf file
            when: priv_ip_res is success
            blockinfile:
              path: /etc/security/limits.conf
              block: |
                * soft nofile 64000
                * hard nofile 64000
                * soft nproc 32000
                * hard nproc 32000
              backup: yes
            register: limits_conf_res

          - debug: var=limits_conf_res

          - name: create 90.nproc.conf file
            when: limits_conf_res is success
            copy:
              dest: /etc/security/limits.d/90-nproc.conf
              content: |
                * soft nproc 32000
                * hard nproc 32000
            register: nproc_conf_res

          - name: get hostname
            shell: hostname
            register: hostname_res

          - debug: var=hostname_res

          - name: update "/etc/hosts"
            lineinfile:
                dest: /etc/hosts
                regexp: '^127.0.0.1'
                line: '127.0.0.1 localhost {{ hostname_res.stdout }} {{ pub_ip.stdout}}'
                state: present
            register: update_hosts_res

          - debug: var=update_hosts_res

          - name: backup existing mongod.conf
            when: update_hosts_res is success
            shell: mv /etc/mongod.conf /etc/mongod.conf.old
            register: conf_backup_res

          - debug: var=conf_backup_res

          - name: copy mongod-repl to /etc/mongod.conf
            when: conf_backup_res is success
            shell: mv ../mongod-repl.conf /etc/mongod.conf
            register: new_conf_res

          - debug: var=new_conf_res

          - name: get ansible_fqdn value
            when: new_conf_res is success
            shell: echo {{ ansible_fqdn }}
            register: fqdn_res

          - debug: var=fqdn_res

          - name: create the /srv/mongod dir
            when: fqdn_res is success
            file:
              path: /srv/mongod
              state: directory
              mode: 0755
            register: keyfile_dir_res

          - name: copy shared replicaset-keyfile to /srv/mongod/
            when: keyfile_dir_res is success
            shell: mv ../replicaset-keyfile /srv/mongod/replicaset-keyfile
            register: keyfile_copy_res

          - name: change permissions for /srv/mongod/replicaset-keyfile
            when: keyfile_copy_res is success
            shell: chmod 400 /srv/mongod/replicaset-keyfile
            register: keyfile_chmod_res

          - name: chown /srv/mongod to mongod process
            when: keyfile_chmod_res is success
            shell: chown -R mongod:mongod /srv/mongod/
            register: keyfile_chown_res

          - name: check for existing database files on S3
            when: keyfile_chown_res is success
            aws_s3:
                bucket: "{{BACKUP_BUCKET}}"
                mode: list
            register: s3_list_res

          - debug: var=s3_list_res

          - include_tasks: restore.yml
            when: s3_list_res.s3_keys[0] == "mongo_data.tar.gz"
            ignore_errors: True
